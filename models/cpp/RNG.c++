/*	Fast Random Number Generator		Object-Oriented Version		Robert Axtell		The Brookings Institution		and	Middlebury College		Current version: September 2004	 */#if defined (_MSC_VER)  // Visual studio#define thread_local __declspec( thread )#elif defined (__GCC__) // GCC#define thread_local __thread#endif#include <random>#include <time.h>#include <thread>#include <math.h>#include "RNG.h"/////////////////////////////////	Object Implementations...///////////////////////////////using namespace std;// RandomNumberGenerator::RandomNumberGenerator() : engines(), distribution (0, INT32_MAX) {// 	int threads = std::max(1, std::this_thread::get_id());// 	for(int seed = 0; seed < threads; ++seed)// 	{// 		engines.push_back(Engine(seed));// 	}// }	// double RandomNumberGenerator::operator()() {// 	int id = std::this_thread::get_id();// 	return distribution(engines[id]);// }// int	RandomNumberGenerator::LongInteger() {// 			return dist(rng);// 		};	//	RandomNumberGnerator::LongInteger()	// int	RandomNumberGenerator::IntegerInRange (int min, int max) {// 			return min + LongInteger() % (max - min + 1);// 		};	//	RandomNumberGenerator::IntegerInRange()RandomNumberGenerator::RandomNumberGenerator() {}/* Thread-safe function that returns a random number between min and max (inclusive).This function takes ~142% the time that calling rand() would take. For this extracost you get a better uniform distribution and thread-safety. */int IntegerInRange(int min, int max) {    static thread_local mt19937* generator = nullptr;    if (!generator) generator = new mt19937(clock() + std::hash<std::thread::id>()(std::this_thread::get_id()));    uniform_int_distribution<int> distribution(min, max);    return distribution(*generator);}