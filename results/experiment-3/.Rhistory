ylab("Size") +
theme_classic()
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
library(poweRlaw) # for CSN
library(fExtremes) # one possible source for Hill estimator
library(condmixt)  # one possible source for Hill estimator
library(parallel)
library(VGAM)
library(gridExtra)
set.seed(1457473324)
# fuction returns a data frame of rank, pl, exp
# so that the same uniform variates generate both
# the power-law and the exponential data
generate_data <- function(n, cutoff, alpha, lambda) {
uniform.variates <- runif(n, 0, 1)
all.data <- data_frame(rank = 1:n)
pldata <- cutoff / (uniform.variates ^ (1 / alpha)) # inverse CDF
all.data$pl <- sort(pldata, decreasing = TRUE) # rank-size ordering
expdata <- -1 * (log(uniform.variates) / lambda) # inverse CDF
all.data$exp <- sort(expdata, decreasing = TRUE) # rank-size ordering
expdata <- data_frame(rank = seq_along(expdata), size = expdata)
all.data
}
dat <- generate_data(n = 1000, cutoff = 1, alpha = 1, lambda = 0.1)
ggplot(dat, aes(x = rank)) +
geom_point(aes(y = pl),shape = 1, color = "black") +
geom_point(aes(y = exp), shape = 2, color = "brown") +
scale_x_log10() +
scale_y_log10() +
xlab("Rank") +
ylab("Size") +
theme_classic()
ggplot(dat, aes(x = rank)) +
+   geom_point(aes(y = pl),shape = 1, color = "black") +
+   geom_point(aes(y = exp), shape = 2, color = "brown") +
+   scale_x_log10() +
+   scale_y_log10() +
+   xlab("Rank") +
+   ylab("Size") +
+   theme_classic()
p<- ggplot(dat, aes(x = rank)) +
+   geom_point(aes(y = pl),shape = 1, color = "black") +
+   geom_point(aes(y = exp), shape = 2, color = "brown") +
+   scale_x_log10() +
+   scale_y_log10() +
+   xlab("Rank") +
+   ylab("Size") +
+   theme_classic()
p<- ggplot(dat, aes(x = rank))
+   geom_point(aes(y = pl),shape = 1, color = "black") +
+   geom_point(aes(y = exp), shape = 2, color = "brown") +
+   scale_x_log10() +
+   scale_y_log10() +
+   xlab("Rank") +
+   ylab("Size") +
+   theme_classic()
p<- ggplot(dat, aes(x = rank)) +
geom_point(aes(y = pl),shape = 1, color = "black") +
geom_point(aes(y = exp), shape = 2, color = "brown") +
scale_x_log10() +
scale_y_log10() +
xlab("Rank") +
ylab("Size") +
theme_classic()
p
p + coord_flip()
uniform.variates <- runif(n, 0, 1)
all.data <- data_frame(rank = 1:n)
all.data$density <- all.data$rank / max(all.data$rank)
pldata <- cutoff / (uniform.variates ^ (1 / alpha)) # inverse CDF
all.data$pl <- sort(pldata, decreasing = TRUE) # rank-size ordering
n=1000
cutoff=1
alpha=1
lambda=0.1
uniform.variates <- runif(n, 0, 1)
all.data <- data_frame(rank = 1:n)
all.data$density <- all.data$rank / max(all.data$rank)
pldata <- cutoff / (uniform.variates ^ (1 / alpha)) # inverse CDF
all.data$pl <- sort(pldata, decreasing = TRUE) # rank-size ordering
ggplot(all.data, aes(x = density)) +
geom_point(aes(y = pl),shape = 1, color = "black") +
scale_x_log10() +
scale_y_log10() +
xlab("Rank") +
ylab("Size") +
theme_classic()
ggplot(all.data, aes(x = density)) +
geom_point(aes(y = pl),shape = 1, color = "black") +
scale_x_log10() +
scale_y_log10() +
xlab("Rank") +
ylab("Size") +
theme_classic() + coord_flip()
ggplot(all.data, aes(x = density)) +
geom_point(aes(y = pl),shape = 1, color = "black") +
scale_x_log10() +
scale_y_log10() +
xlab("Density") +
ylab("Value") +
theme_classic() +
coord_flip() +
scale_x_reverse()
ggplot(all.data, aes(x = density)) +
geom_point(aes(y = pl),shape = 1, color = "black") +
scale_x_log10() +
scale_y_log10() +
xlab("Density") +
ylab("Value") +
theme_classic() +
scale_x_reverse()
ggplot(all.data, aes(x = density)) +
geom_point(aes(y = pl),shape = 1, color = "black") +
scale_x_log10() +
scale_y_log10() +
xlab("Density") +
ylab("Value") +
theme_classic() +
coord_flip() +
scale_x_reverse()
ggplot(all.data, aes(x = pl)) +
geom_point(aes(y = density),shape = 1, color = "black") +
scale_x_log10() +
scale_y_log10() +
ylab("Density") +
xlab("Value") +
theme_classic()
ggplot(all.data, aes(x = pl)) +
geom_point(aes(y = density),shape = 1, color = "black") +
scale_x_reverse() +
scale_y_log10() +
ylab("Density") +
xlab("Value") +
theme_classic() +
ggplot(all.data, aes(x = pl)) +
geom_point(aes(y = density),shape = 1, color = "black") +
scale_x_reverse() +
scale_y_log10() +
ylab("Density") +
xlab("Value") +
theme_classic()
ggplot(all.data, aes(x = pl)) +
geom_point(aes(y = density),shape = 1, color = "black") +
scale_x_reverse() +
scale_y_log10() +
ylab("Density") +
xlab("Value") +
theme_classic()
ggplot(all.data, aes(x = pl)) +
geom_point(aes(y = density),shape = 1, color = "black") +
scale_x_log10() +
scale_y_log10() +
ylab("Density") +
xlab("Value") +
theme_classic()
ggplot(all.data, aes(x = pl)) +
geom_point(aes(y = density),shape = 1, color = "black") +
#    scale_x_log10() +
scale_y_log10() +
ylab("Density") +
xlab("Value") +
theme_classic()
qplot(all.data$pl)
ggplot(all.data, aes(x=pl)) + geom_histogram()
ggplot(all.data, aes(x=pl)) + geom_histogram() + scale_x_log10()
ggplot(all.data, aes(x=pl)) + geom_histogram(binwidth=1) + theme_classic() +
xlab("Value") + ylab("Count")
ggplot(all.data, aes(x=pl)) + geom_histogram(binwidth=10) + theme_classic() +
xlab("Value") + ylab("Count")
ggplot(all.data, aes(x=pl)) + geom_histogram() + scale_x_log10() +
theme_classic() + xlab("Value") + ylab("Count")
ggplot(all.data, aes(x=pl)) + geom_histogram(binwidth=1) + scale_x_log10() +
theme_classic() + xlab("Value") + ylab("Count")
ggplot(all.data, aes(x=pl)) + geom_histogram(binwidth=10) + scale_x_log10() +
theme_classic() + xlab("Value") + ylab("Count")
ggplot(all.data, aes(x=pl)) + geom_histogram(binwidth=0) + scale_x_log10() +
theme_classic() + xlab("Value") + ylab("Count")
ggplot(all.data, aes(x=pl)) + geom_histogram(binwidth=.1) + scale_x_log10() +
theme_classic() + xlab("Value") + ylab("Count")
ggplot(all.data, aes(x=pl)) + geom_histogram() + scale_x_log10() +
theme_classic() + xlab("Value") + ylab("Count")
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(poweRlaw)
d <- read_csv("~/Dropbox/db/db.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(poweRlaw)
d <- read_csv("~/Dropbox/db/db.csv")
View(d)
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(poweRlaw)
d <- read_csv("~/Dropbox/db/db.csv")
View(d)
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(poweRlaw)
fit <- displ$new(d$population_estimate)
fit <- displ$new(d$population_estimate)
est <- estimate_xmin(fit)
fit$xmin <- est
est$KS
d$population_estimate
rnage(d$population_estimate)
range(d$population_estimate)
d <- read_csv("~/Dropbox/db/db.csv")
fit <- conpl$new(d$population_estimate)
est <- estimate_xmin(fit)
fit$xmin <- est
est$KS
d$population_estimate
est <- estimate_xmin(fit)
est
View(d$population_estimate)
d$population_estimate
is.vector(d$population_estimate)
is.numeric(d$population_estimate)
fit
d <- read_csv("~/Dropbox/db/db.csv")
dbfit <- displ$new(d$population_estimate)
est <- estimate_xmin(dbfit)
sd(d$population_estimate)
mean(d$population_estimate)
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(poweRlaw)
d <- read_csv("~/Dropbox/db/db.csv")
dbfit <- displ$new(d$population_estimate)
dbfit <- displ$new(d$population_estimate)
dbfit$setXmin(5e+05)
library(parallel)
bs <- bootstrap_p(dbfit, threads = parallel::detectCores(), no_of_sims = 200)
d$population_estimate
plot(dbfit)
df
d
d = data.frame()
d
d$X1 = c("01 02 03 04 05", "06 07 08 09 10")
d[1]$X1 = "01 02 03 04 05"
d$X1 = 0
x = c("01 02 03 04 05" ,"06 07 08 09 10")
library(tidyr)
separate(x, sep = " ")
x = c("01 02 03 04 05" ,"06 07 08 09 10")
d = data.frame(x)
separate(d, x = " ")
separate(d, x, sep = " ")
separate(d, x, into = c("x1", "x2", "x3", "x4", "x5"), sep = " ")
x = c("01 02 03 04 05" ,"06 07 08 09 10")
d = data.frame(x)
d = separate(d, x, into = c("x1", "x2", "x3", "x4", "x5"), sep = " ")
d
v = c(d$x1, d$x2, d$x3, d$x4, d$x5)
v
ftable(x)
x
d
c(d$x1)
c(d$x1, d$x2)
v
ftable(v)
#parallel analysis
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
#d <- read_csv("~/Dropbox/data-pull/parallel-run-3-3.csv")
d <- read_csv("~/c/exchange/results/new/parallel_results.csv")
# Drop some bad data
d$activation.method <- factor(d$activation.method, levels = c("-1", "0", "1", "2", "3", "4", "5"), labels = c("Fixed", "Random", "Uniform", "Poisson-1", "Poisson-Poor", "Poisson-Rich", "Poisson-Middle"))
d <- dplyr::filter(d, activation.method != "Poisson-1") # re-do this
d <- dplyr::mutate(d, run = (row_number() - 1) %/% 100)
interactions.plot <- ggplot(d, aes(x=time, y=interactions, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("Number of Interactions") +
scale_y_continuous(labels = comma) +
ggtitle("Number of Interactions over Time")
wealthmin.plot <- ggplot(d, aes(x=time, y=currentwealth.min, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("Minimum Agent Wealth") +
scale_y_continuous(labels = comma) +
ggtitle("Minimum Agent Wealth over Time")
wealthmax.plot <- ggplot(d, aes(x=time, y=currentwealth.max, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("Maximum Agent Wealth") +
scale_y_continuous(labels = comma)+
ggtitle("Max Agent Wealth over Time")
wealthavg.plot <- ggplot(d, aes(x=time, y=currentwealth.avg, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("Average Agent Wealth") +
scale_y_continuous(labels = comma) +
ggtitle("Mean Agent Wealth over Time")
wealthsd.plot <- ggplot(d, aes(x=time, y=currentwealth.sd, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("S. D. of Agent Wealth") +
scale_y_continuous(labels = comma) +
ggtitle("Standard Deviation of Agent Wealth over Time")
utilitymin.plot <- ggplot(d, aes(x=time, y=utility.min, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("Minimum Agent Utility") +
scale_y_continuous(labels = comma) +
ggtitle("Minimum Agent Utility over Time")
utilitymax.plot <- ggplot(d, aes(x=time, y=utility.max, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("Maximum Agent Utility") +
scale_y_continuous(labels = comma) +
ggtitle("Maximum Agent Utility over Time")
utilityavg.plot <- ggplot(d, aes(x=time, y=utility.avg, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("Average Agent Utility") +
scale_y_continuous(labels = comma) +
ggtitle("Average Agent Utility over Time")
utilitysd.plot <- ggplot(d, aes(x=time, y=utility.sd, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("S. D. of Agent Utility") +
scale_y_continuous(labels = comma) +
ggtitle("Standard Deviation of Agent Utility Over Time")
l2sdmrs.plot <- ggplot(d, aes(x=time, y=L2.sd.MRS, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("L2 S. D. of Agent MRSes") +
scale_y_continuous(labels = comma) +
ggtitle("Standard Deviation of Agent MRSes over Time")
maxsdmrs.plot <- ggplot(d, aes(x=time, y=max.sd.MRS, group = run, color = factor(activation.method))) +
#geom_point(alpha = 0.01) +
stat_summary(fun.y = "mean", geom = "line", size = 1, alpha = 1, aes(group = factor(activation.method))) +
scale_color_discrete(name="Activation Method") +
theme_classic(base_family = "serif", base_size = 12) +
xlab("Time") +
ylab("Max S. D. of Agent MRSes") +
scale_y_continuous(labels = comma) +
ggtitle("Standard Deviation of Agent MRSes over Time")
interactions.plot
library(readr)
?write_csv
#CPP
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(sitools)
library(magrittr)
library(xtable)
perfplot <- function (i) {
# take an argument 1, 2, 3
if (i != 1 && i != 2 && i != 3) {
stop("Invalid argument")
}
setwd(paste0("~/Dropbox/zi-docker/results/experiment-", i))
if (i == 3) {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure")
} else {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure", "erlang", "python")
}
#gather(dat, Type, Time, 2:4)
#java_new_results <- read_csv("java-benchmark-new.csv")
#java_old_results <- read_csv("java-benchmark-old.csv")
for (x in languages) {
assign(paste0(x, "_results"),
gather(read_csv(paste0(gsub("_", "-", x), "-benchmark.csv")),
Type, Time, 2:4))
assign(paste0(x, "_results"),
dplyr::mutate(get(paste0(x, "_results")),
Language = x))
}
for (x in languages) {
assign(paste0(x, "_wall_results"),
dplyr::filter(get(paste0(x, "_results")),
Type == "real"))
}
big_wall_results <- data.frame()
for (x in languages) {
avg <- mean(get(paste0(x, "_wall_results"))[1:9,]$Time)
print(avg)
assign(paste0(x, "_wall_results"),
dplyr::mutate(get(paste0(x, "_wall_results")),
speedup = avg/Time))
big_wall_results <- rbind(big_wall_results,
get(paste0(x, "_wall_results")))
}
big_wall_results$Language <- factor(big_wall_results$Language)
p1 <- ggplot(big_wall_results, aes(x=threads, y=Time, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Wall time (s)") +
ggtitle(paste("Performance of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks()
p2 <- ggplot(big_wall_results, aes(x=threads, y=speedup, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Speedup") +
ggtitle(paste("Speedup of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides = "bl")
p3 <- ggplot(big_wall_results, aes(x=Language, y=memory, fill=Language)) +
stat_summary(fun.y="mean", geom="bar", size=1) +
xlab("Language") +
ylab("Memory used") +
ggtitle(paste("Memory usage of models\nExperiment", i)) +
theme_bw() +
scale_y_log10("Memory used", labels = f2si, breaks = c(1e+03, 1e+06, 1e+09)) +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides="l") +
scale_fill_discrete(guide=FALSE)
#annotation_logticks(sides = "l")
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean = round(mean(Time), 2))
t1 <- spread(print_results, threads, mean)
t2 <- spread(print_results, Language, mean)
write_csv(big_wall_results, "full-results.csv")
write_csv(print_results, "summmary-results.csv")
ggsave(paste0("../experiment-", i, "-performance.png"), p1)
ggsave(paste0("../experiment-", i, "-speedup.png"), p2)
ggsave(paste0("../experiment-", i, "-memory.png"), p3)
#print(xtable(t1), file = paste0("../experiment-", i, "-table.tex"), include.rownames = F)
print(xtable(t2), file = paste0("../experiment-", i, "-table.tex"), include.rownames = F)
}
perfplot(1)
perfplot(2)
perfplot(3)
asdf
d <- rnorm(10000)
hist(d)
hist(d, breaks = 1)
hist(d, breaks = 2)
hist(d, breaks = 1)
hist(d, breaks = 1)
hist(d, breaks = 10)
hist(d, breaks = 100)
?breaks
?hist
d<-d*10
d
d<-round(d)
d
hist(d)
range
range(d)
hist(d, breaks = -38:37)
hist(d, breaks = min(d):max(d))
hist(d, breaks = -38:37)
hist(d, breaks = min(d):max(d))
ggplot(d)
as.data.frame(d)
d<- as.data.frame(d)
d
names(d)
names(d) <- "X1"
ggplot(d, aes(x=X1)) + geom_histogram()
ggplot(d, aes(x=X1)) + geom_histogram(binwidth=1)
