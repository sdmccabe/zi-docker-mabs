scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides = "bl")
p3 <- ggplot(big_wall_results, aes(x=Language, y=memory, fill=Language)) +
stat_summary(fun.y="mean", geom="bar", size=1) +
xlab("Language") +
ylab("Memory used") +
ggtitle(paste("Memory usage of models\nExperiment", i)) +
theme_bw() +
scale_y_log10("Memory used", labels = f2si, breaks = c(1e+03, 1e+06, 1e+09)) +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides="l") +
scale_fill_discrete(guide=FALSE)
#annotation_logticks(sides = "l")
ggsave(paste0("../experiment-", i, "-performance.png"), p1)
ggsave(paste0("../experiment-", i, "-speedup.png"), p2)
ggsave(paste0("../experiment-", i, "-memory.png"), p3)
}
perfplot(1)
perfplot(2)
perfplot(3)
big_wall_results %>% group_by(Language, threads) %>% summarize(mean=mean(Time))
big_wall_results %>% group_by(Language, threads) %>% summarize(mean=mean(Time)) -> print_results
print_results
?table
table(print_results)
print_results
table(print_results$mean)
xtabs(print_results)
spread(print_results, language, mean)
spread(print_results, Language, mean)
spread(print_results, threads, mean)
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean=mean(Time))
t1 <- spread(print_results, threads, mean)
t2 <- spread(print_results, language, mean)
t2 <- spread(print_results, Language, mean)
t1
t2
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean=round(mean(Time)),1)
print_results
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean=round(mean(Time)),2)
print_results
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean=round(mean(Time), 2))
print_results
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean=round(mean(Time), 1))
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean=round(mean(Time), 1))
print_results
t1 <- spread(print_results, threads, mean)
t2 <- spread(print_results, Language, mean)
t2
t1
t2
library(xtable)
xtable(t1)
#CPP
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(sitools)
library(magrittr)
library(xtable)
perfplot <- function (i) {
# take an argument 1, 2, 3
if (i != 1 && i != 2 && i != 3) {
stop("Invalid argument")
}
setwd(paste0("~/Dropbox/zi-docker/results/experiment-", i))
if (i == 3) {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure")
} else {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure", "erlang", "python")
}
#gather(dat, Type, Time, 2:4)
#java_new_results <- read_csv("java-benchmark-new.csv")
#java_old_results <- read_csv("java-benchmark-old.csv")
for (x in languages) {
assign(paste0(x, "_results"),
gather(read_csv(paste0(gsub("_", "-", x), "-benchmark.csv")),
Type, Time, 2:4))
assign(paste0(x, "_results"),
dplyr::mutate(get(paste0(x, "_results")),
Language = x))
}
for (x in languages) {
assign(paste0(x, "_wall_results"),
dplyr::filter(get(paste0(x, "_results")),
Type == "real"))
}
big_wall_results <- data.frame()
for (x in languages) {
avg <- mean(get(paste0(x, "_wall_results"))[1:9,]$Time)
print(avg)
assign(paste0(x, "_wall_results"),
dplyr::mutate(get(paste0(x, "_wall_results")),
speedup = avg/Time))
big_wall_results <- rbind(big_wall_results,
get(paste0(x, "_wall_results")))
}
big_wall_results$Language <- factor(big_wall_results$Language)
p1 <- ggplot(big_wall_results, aes(x=threads, y=Time, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Wall time (s)") +
ggtitle(paste("Performance of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks()
p2 <- ggplot(big_wall_results, aes(x=threads, y=speedup, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Speedup") +
ggtitle(paste("Speedup of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides = "bl")
p3 <- ggplot(big_wall_results, aes(x=Language, y=memory, fill=Language)) +
stat_summary(fun.y="mean", geom="bar", size=1) +
xlab("Language") +
ylab("Memory used") +
ggtitle(paste("Memory usage of models\nExperiment", i)) +
theme_bw() +
scale_y_log10("Memory used", labels = f2si, breaks = c(1e+03, 1e+06, 1e+09)) +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides="l") +
scale_fill_discrete(guide=FALSE)
#annotation_logticks(sides = "l")
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean = round(mean(Time), 1))
t1 <- spread(print_results, threads, mean)
t2 <- spread(print_results, Language, mean)
ggsave(paste0("../experiment-", i, "-performance.png"), p1)
ggsave(paste0("../experiment-", i, "-speedup.png"), p2)
ggsave(paste0("../experiment-", i, "-memory.png"), p3)
print(xtable(t1), file = paste0("../experiment-", i, "-table-1.tex"), include.rownames = F)
print(xtable(t1), file = paste0("../experiment-", i, "-table-2.tex"), include.rownames = F)
}
perfplot(1)
perfplot(2)
perfplot(3)
#CPP
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(sitools)
library(magrittr)
library(xtable)
perfplot <- function (i) {
# take an argument 1, 2, 3
if (i != 1 && i != 2 && i != 3) {
stop("Invalid argument")
}
setwd(paste0("~/Dropbox/zi-docker/results/experiment-", i))
if (i == 3) {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure")
} else {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure", "erlang", "python")
}
#gather(dat, Type, Time, 2:4)
#java_new_results <- read_csv("java-benchmark-new.csv")
#java_old_results <- read_csv("java-benchmark-old.csv")
for (x in languages) {
assign(paste0(x, "_results"),
gather(read_csv(paste0(gsub("_", "-", x), "-benchmark.csv")),
Type, Time, 2:4))
assign(paste0(x, "_results"),
dplyr::mutate(get(paste0(x, "_results")),
Language = x))
}
for (x in languages) {
assign(paste0(x, "_wall_results"),
dplyr::filter(get(paste0(x, "_results")),
Type == "real"))
}
big_wall_results <- data.frame()
for (x in languages) {
avg <- mean(get(paste0(x, "_wall_results"))[1:9,]$Time)
print(avg)
assign(paste0(x, "_wall_results"),
dplyr::mutate(get(paste0(x, "_wall_results")),
speedup = avg/Time))
big_wall_results <- rbind(big_wall_results,
get(paste0(x, "_wall_results")))
}
big_wall_results$Language <- factor(big_wall_results$Language)
p1 <- ggplot(big_wall_results, aes(x=threads, y=Time, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Wall time (s)") +
ggtitle(paste("Performance of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks()
p2 <- ggplot(big_wall_results, aes(x=threads, y=speedup, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Speedup") +
ggtitle(paste("Speedup of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides = "bl")
p3 <- ggplot(big_wall_results, aes(x=Language, y=memory, fill=Language)) +
stat_summary(fun.y="mean", geom="bar", size=1) +
xlab("Language") +
ylab("Memory used") +
ggtitle(paste("Memory usage of models\nExperiment", i)) +
theme_bw() +
scale_y_log10("Memory used", labels = f2si, breaks = c(1e+03, 1e+06, 1e+09)) +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides="l") +
scale_fill_discrete(guide=FALSE)
#annotation_logticks(sides = "l")
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean = round(mean(Time), 1))
t1 <- spread(print_results, threads, mean)
t2 <- spread(print_results, Language, mean)
ggsave(paste0("../experiment-", i, "-performance.png"), p1)
ggsave(paste0("../experiment-", i, "-speedup.png"), p2)
ggsave(paste0("../experiment-", i, "-memory.png"), p3)
print(xtable(t1), file = paste0("../experiment-", i, "-table-1.tex"), include.rownames = F)
print(xtable(t2), file = paste0("../experiment-", i, "-table-2.tex"), include.rownames = F)
}
perfplot(1)
perfplot(2)
perfplot(3)
#CPP
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(sitools)
library(magrittr)
library(xtable)
perfplot <- function (i) {
# take an argument 1, 2, 3
if (i != 1 && i != 2 && i != 3) {
stop("Invalid argument")
}
setwd(paste0("~/Dropbox/zi-docker/results/experiment-", i))
if (i == 3) {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure")
} else {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure", "erlang", "python")
}
#gather(dat, Type, Time, 2:4)
#java_new_results <- read_csv("java-benchmark-new.csv")
#java_old_results <- read_csv("java-benchmark-old.csv")
for (x in languages) {
assign(paste0(x, "_results"),
gather(read_csv(paste0(gsub("_", "-", x), "-benchmark.csv")),
Type, Time, 2:4))
assign(paste0(x, "_results"),
dplyr::mutate(get(paste0(x, "_results")),
Language = x))
}
for (x in languages) {
assign(paste0(x, "_wall_results"),
dplyr::filter(get(paste0(x, "_results")),
Type == "real"))
}
big_wall_results <- data.frame()
for (x in languages) {
avg <- mean(get(paste0(x, "_wall_results"))[1:9,]$Time)
print(avg)
assign(paste0(x, "_wall_results"),
dplyr::mutate(get(paste0(x, "_wall_results")),
speedup = avg/Time))
big_wall_results <- rbind(big_wall_results,
get(paste0(x, "_wall_results")))
}
big_wall_results$Language <- factor(big_wall_results$Language)
p1 <- ggplot(big_wall_results, aes(x=threads, y=Time, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Wall time (s)") +
ggtitle(paste("Performance of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks()
p2 <- ggplot(big_wall_results, aes(x=threads, y=speedup, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Speedup") +
ggtitle(paste("Speedup of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides = "bl")
p3 <- ggplot(big_wall_results, aes(x=Language, y=memory, fill=Language)) +
stat_summary(fun.y="mean", geom="bar", size=1) +
xlab("Language") +
ylab("Memory used") +
ggtitle(paste("Memory usage of models\nExperiment", i)) +
theme_bw() +
scale_y_log10("Memory used", labels = f2si, breaks = c(1e+03, 1e+06, 1e+09)) +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides="l") +
scale_fill_discrete(guide=FALSE)
#annotation_logticks(sides = "l")
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean = round(mean(Time), 2))
t1 <- spread(print_results, threads, mean)
t2 <- spread(print_results, Language, mean)
ggsave(paste0("../experiment-", i, "-performance.png"), p1)
ggsave(paste0("../experiment-", i, "-speedup.png"), p2)
ggsave(paste0("../experiment-", i, "-memory.png"), p3)
print(xtable(t1), file = paste0("../experiment-", i, "-table.tex"), include.rownames = F)
#print(xtable(t2), file = paste0("../experiment-", i, "-table-2.tex"), include.rownames = F)
}
perfplot(1)
perfplot(2)
perfplot(3)
t1
t2
#CPP
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(sitools)
library(magrittr)
library(xtable)
perfplot <- function (i) {
# take an argument 1, 2, 3
if (i != 1 && i != 2 && i != 3) {
stop("Invalid argument")
}
setwd(paste0("~/Dropbox/zi-docker/results/experiment-", i))
if (i == 3) {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure")
} else {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure", "erlang", "python")
}
#gather(dat, Type, Time, 2:4)
#java_new_results <- read_csv("java-benchmark-new.csv")
#java_old_results <- read_csv("java-benchmark-old.csv")
for (x in languages) {
assign(paste0(x, "_results"),
gather(read_csv(paste0(gsub("_", "-", x), "-benchmark.csv")),
Type, Time, 2:4))
assign(paste0(x, "_results"),
dplyr::mutate(get(paste0(x, "_results")),
Language = x))
}
for (x in languages) {
assign(paste0(x, "_wall_results"),
dplyr::filter(get(paste0(x, "_results")),
Type == "real"))
}
big_wall_results <- data.frame()
for (x in languages) {
avg <- mean(get(paste0(x, "_wall_results"))[1:9,]$Time)
print(avg)
assign(paste0(x, "_wall_results"),
dplyr::mutate(get(paste0(x, "_wall_results")),
speedup = avg/Time))
big_wall_results <- rbind(big_wall_results,
get(paste0(x, "_wall_results")))
}
big_wall_results$Language <- factor(big_wall_results$Language)
p1 <- ggplot(big_wall_results, aes(x=threads, y=Time, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Wall time (s)") +
ggtitle(paste("Performance of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks()
p2 <- ggplot(big_wall_results, aes(x=threads, y=speedup, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Speedup") +
ggtitle(paste("Speedup of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides = "bl")
p3 <- ggplot(big_wall_results, aes(x=Language, y=memory, fill=Language)) +
stat_summary(fun.y="mean", geom="bar", size=1) +
xlab("Language") +
ylab("Memory used") +
ggtitle(paste("Memory usage of models\nExperiment", i)) +
theme_bw() +
scale_y_log10("Memory used", labels = f2si, breaks = c(1e+03, 1e+06, 1e+09)) +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides="l") +
scale_fill_discrete(guide=FALSE)
#annotation_logticks(sides = "l")
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean = round(mean(Time), 2))
t1 <- spread(print_results, threads, mean)
t2 <- spread(print_results, Language, mean)
ggsave(paste0("../experiment-", i, "-performance.png"), p1)
ggsave(paste0("../experiment-", i, "-speedup.png"), p2)
ggsave(paste0("../experiment-", i, "-memory.png"), p3)
#print(xtable(t1), file = paste0("../experiment-", i, "-table.tex"), include.rownames = F)
print(xtable(t2), file = paste0("../experiment-", i, "-table-2.tex"), include.rownames = F)
}
perfplot(1)
perfplot(2)
perfplot(3)
#CPP
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(sitools)
library(magrittr)
library(xtable)
perfplot <- function (i) {
# take an argument 1, 2, 3
if (i != 1 && i != 2 && i != 3) {
stop("Invalid argument")
}
setwd(paste0("~/Dropbox/zi-docker/results/experiment-", i))
if (i == 3) {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure")
} else {
languages <- c("cpp", "c", "c_openmp", "go", "scala",  "java_new", "java_old", "clojure", "erlang", "python")
}
#gather(dat, Type, Time, 2:4)
#java_new_results <- read_csv("java-benchmark-new.csv")
#java_old_results <- read_csv("java-benchmark-old.csv")
for (x in languages) {
assign(paste0(x, "_results"),
gather(read_csv(paste0(gsub("_", "-", x), "-benchmark.csv")),
Type, Time, 2:4))
assign(paste0(x, "_results"),
dplyr::mutate(get(paste0(x, "_results")),
Language = x))
}
for (x in languages) {
assign(paste0(x, "_wall_results"),
dplyr::filter(get(paste0(x, "_results")),
Type == "real"))
}
big_wall_results <- data.frame()
for (x in languages) {
avg <- mean(get(paste0(x, "_wall_results"))[1:9,]$Time)
print(avg)
assign(paste0(x, "_wall_results"),
dplyr::mutate(get(paste0(x, "_wall_results")),
speedup = avg/Time))
big_wall_results <- rbind(big_wall_results,
get(paste0(x, "_wall_results")))
}
big_wall_results$Language <- factor(big_wall_results$Language)
p1 <- ggplot(big_wall_results, aes(x=threads, y=Time, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Wall time (s)") +
ggtitle(paste("Performance of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks()
p2 <- ggplot(big_wall_results, aes(x=threads, y=speedup, color = Language)) +
stat_summary(fun.y="mean", geom="line", size=1) +
xlab("\n Number of threads (log)") +
ylab("Speedup") +
ggtitle(paste("Speedup of models\nExperiment", i)) +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides = "bl")
p3 <- ggplot(big_wall_results, aes(x=Language, y=memory, fill=Language)) +
stat_summary(fun.y="mean", geom="bar", size=1) +
xlab("Language") +
ylab("Memory used") +
ggtitle(paste("Memory usage of models\nExperiment", i)) +
theme_bw() +
scale_y_log10("Memory used", labels = f2si, breaks = c(1e+03, 1e+06, 1e+09)) +
theme(text=element_text(size=12, family="Georgia")) +
annotation_logticks(sides="l") +
scale_fill_discrete(guide=FALSE)
#annotation_logticks(sides = "l")
print_results <- big_wall_results %>% group_by(Language, threads) %>% summarize(mean = round(mean(Time), 2))
t1 <- spread(print_results, threads, mean)
t2 <- spread(print_results, Language, mean)
ggsave(paste0("../experiment-", i, "-performance.png"), p1)
ggsave(paste0("../experiment-", i, "-speedup.png"), p2)
ggsave(paste0("../experiment-", i, "-memory.png"), p3)
#print(xtable(t1), file = paste0("../experiment-", i, "-table.tex"), include.rownames = F)
print(xtable(t2), file = paste0("../experiment-", i, "-table.tex"), include.rownames = F)
}
perfplot(1)
perfplot(2)
perfplot(3)
